
<style>
@import url('https://fonts.googleapis.com/css2?family=Lustria&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&display=swap');
.wild-header-section {
  padding: 40px 0;
}

.wild-section-title {

  font-size: 36px;
  font-weight: 400;
  margin-bottom: 16px;
  text-align: left;
  padding-left: 16px;
  line-height: 120%;
  letter-spacing: 0px;
}

.wild-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  padding:20px;
  gap: 16px;
}

.wild-grid-item {
  position: relative;
  overflow: hidden;
  background: #f9f9f9;
 
}

.wild-image-wrapper {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%;   /* perfect 1:1 squares */
}

.wild-grid-image {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  object-fit: cover;
  display: block;
}

/* Plus icon styles */
.plus-icon-link {
  position: absolute;
  top: 16px;
  right: 16px;
  z-index: 2;
  width: 34px;
  height: 34px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #fff;
  border-radius: 50%;
  box-shadow: 0 1px 6px rgba(0,0,0,0.12);
  text-decoration: none;
  transition: box-shadow 0.15s;
}
.plus-icon-link:hover {
  box-shadow: 0 2px 12px rgba(0,0,0,0.18);
}
.plus-icon {
  font-size: 24px;
  font-weight: 700;
  color: #333;
  pointer-events: none;
}

/* Grid and Plus Icon see previous answer */

.product-modal {
  position: fixed;
  top: 0; left: 0; width: 100vw; height: 100vh;
  background: rgba(30,30,30,0.14);
  display: flex; align-items: center; justify-content: center;
  z-index: 1000;
}

.product-modal-content {
  background: #fff;
  max-width: 340px;
  width: 100vw;
  padding: 20px 12px;
  box-shadow: 0 8px 38px rgba(0,0,0,0.18);
  position: relative;
}

.modal-close {
  position: absolute; right: 12px; top: 12px;
  font-size: 30px; background: none; border: none; cursor:pointer; color: #222;
}

{% comment %} .modal-image {
  width: 100px; height: 100px; object-fit: cover; border-radius:8px; margin-bottom: 12px; display: block; margin: 0 auto 12px;
}
.modal-title { font-size: 21px; font-weight: 600; margin: 6px 0 6px 0; text-align: left;}
.modal-price { font-size: 19px; font-weight: 500; margin: 6px 0; text-align: left;}
.modal-description { font-size: 15px; color: #444; margin: 9px 0; text-align:left;} {% endcomment %}

.modal-container {
  display: flex;
  gap: 1rem; /* space between image and text */
  align-items: stretch;
  
  
}

.modal-image {
  width: 100px;
  height: 100px;
  object-fit: cover;
  margin: 0;
  flex-shrink: 0;
}

.modal-text-content {
  display: flex;
  flex:0 0 60%;
  flex-direction: column;
}
.image-div
 {
  flex: 0 0 40%; /* both take equal width (you can adjust) */
}
.image-div img {
  width: 100%;
  height: 100%;   /* fill parent height */
  object-fit: cover; /* adjust how image fits */
}

.modal-title {
  font-family: 'Jost', Arial, sans-serif;
  font-size: 16px;
  margin: 6px 0;
  text-align: left;
  line-height: 120%;
  letter-spacing: 0px;
}

.modal-price {
  font-family: 'Lustria',Arial,serif;
  font-size: 16px;
  font-weight: bold;
  margin: 6px 0;
  text-align: left;
  line-height: 120%;
  letter-spacing: 0px;
}

.modal-description {
  font-family: 'Jost', Arial, sans-serif;
  font-size: 14px;
  color: #000000;
  margin: 9px 0 0 0;
  text-align: left;
  line-height: 110%;
  letter-spacing: -1%;
}


/* Color and size variant styling */
.color-variant-row { display: flex;  margin-bottom:10px;width:100%;}
.color-variant-btn {
  text-align:left;
  padding: 10px 4px;
  border: 1px solid #222;
  {% comment %} border-left: 5px solid #000000; {% endcomment %}
  background: #fff;
  color: #222;
  font-size: 15px;
  cursor: pointer;
  font-weight: 500;
  width:100%;
  z-index: 2; /* above the highlight */
  transition: color 0.3s ease;
}
.color-variant-btn:active, .color-variant-btn.active { background: #000; color: #fff; }
.color-variant-btn.selected{
  background: #000; color: #fff;
  border-left: 5px solid #000 !important;
}
.color-variant-row {
  position: relative;
  display: flex;
}

.color-variant-highlight {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 0;  /* initial no size */
  background-color: black;
  border-radius: 4px;
  transition: left 0.3s ease, width 0.3s ease;
  z-index: 1; /* behind buttons */
}

/* Size select */
{% comment %} .size-variant-select {
  width: 100%; font-size: 15px; border: 1px solid #222; margin-bottom: 16px; padding: 7px 8px; border-radius: 2px;
} {% endcomment %}

/* Label Styling */
label {
  font-family: 'Jost';
  font-size: 14px;
  color: #333;
  font-weight: 400;
  display: block;
  margin-bottom: 4px;
  letter-spacing: 0.01em;
}

/* Container is the positioning context for the caret */
.select-container {
  position: relative;
  display: block;              
  width: 100%;
}

/* Your select (remove any background-image caret here) */
.size-variant-select {
  width: 100%;
  font-family: 'Jost';
  font-size: 16px;
  font-weight: 400;
  border: 1px solid #c5c5c5;
  padding: 14px 48px 14px 12px;  /* room for the caret on the right */
  color: #161616;
  background: #fff;             /* no caret background here */
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  outline: none;
  box-sizing: border-box;
  cursor: pointer;
  transition: border-color 0.1s;
}

.size-variant-select:focus {
  border-color: #161616;
}

/* The caret itself */
.caret {
  position: absolute;
  right: 16px;                  /* stick to the right edge */
  top: 50%;                     /* vertically centered */
  transform: translateY(-50%) rotate(0deg);
  width: 16px;
  height: 16px;
  pointer-events: none;         /* clicks go to the select */
  transition: transform 0.2s ease;
  color: #161616;               /* uses currentColor in the SVG */
}
/* Default caret = down */
.caret {
  position: absolute;
  right: 16px;
  top: 50%;
  transform: translateY(-50%) rotate(0deg);
  width: 16px;
  height: 16px;
  pointer-events: none;         /* clicks go to the select */
  transition: transform 0.2s ease;
  color: #161616; 
  
}

/* Rotate when wrapper has .open */
.select-container.open .caret {
  transform: translateY(-50%) rotate(180deg);
}


/* Rotate when the select is focused (opened on most browsers) */
.select-container:focus-within .caret,
.size-variant-select:focus + .caret {
  transform: translateY(-50%) rotate(180deg);
}

/* Option styling (optional) */
.size-variant-select option {
  font-size: 16px;
  color: #222;
  text-align: center;
}

/* Hide IE default arrow */
.size-variant-select::-ms-expand { display: none; }



/* Add to cart button */
.add-to-cart-btn {
  width: 100%; font-size: 17px;
  padding: 13px 0;
  background: #111; color: #fff;
  border: none; border-radius: 0;
  margin-top: 12px;
  font-weight: 500;
  cursor: pointer;
  display: flex; align-items: center; justify-content: center;
}
.add-to-cart-btn .arrow { font-size: 21px; margin-left: 10px;}




</style>





{% comment %} <section class="wild-header-section">
    
  <h2 class="wild-section-title">{{ section.settings.wild_section_title }}</h2>
  <div class="wild-grid">
    {% assign product_ids = "product_1,product_2,product_3,product_4,product_5,product_6" | split: "," %}
    {% for product_id in product_ids %}
      {% assign product_handle = section.settings[product_id] %}
      {% if product_handle %}
        {% assign product = all_products[product_handle] %}
        <div class="wild-grid-item">
          <div class="wild-image-wrapper">
            {% if product.featured_image %}
              <img
                src="{{ product.featured_image | image_url: width:600 }}"
                alt="{{ product.title }}"
                class="wild-grid-image" height="100%" width="100%"
              />
            {% endif %}
            <a href="{{ product.url }}" class="plus-icon-link" target="_blank" rel="noopener">
              <span class="plus-icon">+</span>
            </a>
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</section> {% endcomment %}

<div class="wild-grid">
  {% assign product_ids = "product_1,product_2,product_3,product_4,product_5,product_6" | split: "," %}
  {% for product_id in product_ids %}
    {% assign product_handle = section.settings[product_id] %}
    {% if product_handle %}
      {% assign product = all_products[product_handle] %}
      <div class="wild-grid-item">
        <div class="wild-image-wrapper">
          <img src="{{ product.featured_image | image_url: width:600 }}" height="100%" width="100%" alt="{{ product.title }}" class="wild-grid-image" />
          <button class="plus-icon-link" data-product="{{ product.id }}">
            <span class="plus-icon">+</span>
          </button>
        </div>
      </div>
      <!-- Modal (hidden by default) -->
      <div class="product-modal" id="product-modal-{{ product.id }}" style="display: none;">
        <div class="product-modal-content">
          <button class="modal-close" data-product="{{ product.id }}">&times;</button>
          <div class="product-modal-info">
            <div class="modal-container">
              <div class="image-div">
                 <img src="{{ product.featured_image | image_url: width:300 }}" height="100%" width="100%" alt="{{ product.title }}" class="modal-image" />

              </div>
           
            <div class="modal-text-content">
            <h3 class="modal-title">{{ product.title }}</h3>
            <p class="modal-price">{{ product.price | money }}</p>
            <p class="modal-description">{{ product.description | strip_html | newline_to_br }}</p>
            </div>
            </div>
            <!-- Color Variants -->
            {% assign color_options = product.options_with_values | where: "name", "Color" %}
            {% if color_options.size > 0 %}
              <label style="margin-top:5px">Color</label>
              <div class="color-variant-row" style="position:relative;">
                 <div class="color-variant-highlight"></div>
                {% for value in color_options.first.values %}
                  <button class="color-variant-btn" style="border-left: 5px solid {{ value | downcase }};">{{ value }}</button>
                {% endfor %}
              </div>

              
            {% endif %}
            <!-- Size Variants -->
            {% assign size_options = product.options_with_values | where: "name", "Size" %}
            {% if size_options.size > 0 %}
              <label for="size">Size</label>
              <div class="field">
              

              <div class="select-container">
                <select class="size-variant-select" id="size" required>
                  <option value="" disabled selected hidden>Choose your size</option>
                  {% for value in size_options.first.values %}
                    <option>{{ value }}</option>
                  {% endfor %}
                </select>

                <!-- Inline SVG caret so we can rotate it -->
                <svg class="caret" viewBox="0 0 10 6" aria-hidden="true">
                  <path fill="currentColor" fill-rule="evenodd"
                    d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" />
                </svg>
              </div>
            </div>
            {% endif %}
            
            <form method="post" action="{{ routes.cart_add_url }}">
            <input type="hidden" name="id" value="{{ product.variants.first.id }}" />
            {% comment %} <input type="submit" value="Add to cart" class="btn" /> {% endcomment %}
             <button class="add-to-cart-btn" type="submit"  >ADD TO CART <span class="arrow">&rarr;</span></button>
          </form>
          </div>
        </div>
      </div>
    {% endif %}
  {% endfor %}
</div>





<script>

  document.querySelectorAll('.size-variant-select').forEach(sel => {
  sel.addEventListener('change', () => {
    sel.blur(); // forces blur so CSS rotates caret back down
  });
});


// Open modal on plus icon click
document.querySelectorAll('.plus-icon-link').forEach(function(btn) {
  btn.addEventListener('click', function(e) {
    e.preventDefault();
    var productId = btn.getAttribute('data-product');
    document.getElementById('product-modal-' + productId).style.display = 'flex';
  });
});
// Close modal on X click
document.querySelectorAll('.modal-close').forEach(function(btn) {
  btn.addEventListener('click', function() {
    var productId = btn.getAttribute('data-product');
    document.getElementById('product-modal-' + productId).style.display = 'none';
  });
});
// Optional: click outside modal to close
document.querySelectorAll('.product-modal').forEach(function(modal) {
  modal.addEventListener('click', function(e) {
    if (e.target === modal) { modal.style.display = 'none'; }
  });
});



{% comment %} document.addEventListener('DOMContentLoaded', () => {
  // For each product modal on the page
  document.querySelectorAll('.product-modal').forEach(modal => {
    let selectedColor = null;

    // When a color button is clicked
    modal.querySelectorAll('.color-variant-btn').forEach(button => {
      button.addEventListener('click', () => {
        // Remove active/selected style from all buttons first
        modal.querySelectorAll('.color-variant-btn').forEach(btn => btn.classList.remove('selected'));
        // Add a style class to this button to indicate selection
        button.classList.add('selected');
        // Store the selected color value (text content)
        selectedColor = button.textContent.trim();
      });
    });

    // When Add to Cart button is clicked
    modal.querySelector('.add-to-cart-btn').addEventListener('click', () => {
      // Get the selected size from dropdown
      const sizeSelect = modal.querySelector('.size-variant-select');
      const selectedSize = sizeSelect ? sizeSelect.value : null;

      if (!selectedColor) {
        alert('Please select a color.');
        return;
      }
      if (!selectedSize) {
        alert('Please select a size.');
        return;
      }

      // Now you have both selectedColor and selectedSize values
      console.log('Add to Cart:', {
        color: selectedColor,
        size: selectedSize,
      });

      // TODO: Add your "add to cart" logic here, e.g., add item with those variant options

    });
  });
}); {% endcomment %}

document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('.product-modal').forEach(modal => {
    let selectedColor = null;

    // Handle color selection
    modal.querySelectorAll('.color-variant-btn').forEach(button => {
      button.addEventListener('click', () => {
        modal.querySelectorAll('.color-variant-btn').forEach(btn => btn.classList.remove('selected'));
        button.classList.add('selected');
        selectedColor = button.textContent.trim();
      });
    });

    // Add to Cart button logic
    modal.querySelector('.add-to-cart-btn').addEventListener('click', async () => {
      const sizeSelect = modal.querySelector('.size-variant-select');
      const selectedSize = sizeSelect ? sizeSelect.value : null;

      if (!selectedColor) {
        alert('Please select a color.');
        return;
      }
      if (!selectedSize) {
        alert('Please select a size.');
        return;
      }

      // Get product variants from Shopify Liquid object via data attribute
      // We will print variants as JSON in a data attribute you must add to the modal div in your Liquid code:
      // Example Liquid code addition:
      // <div class="product-modal" id="product-modal-{{ product.id }}" style="display: none;" data-variants='{{ product.variants | json }}'>

      const variantsData = modal.getAttribute('data-variants');
      

      const variants = JSON.parse(variantsData);

      // Find variant with matching options
      const matchedVariant = variants.find(variant => {
        const colorMatch = variant.option1 === selectedColor || variant.option2 === selectedColor || variant.option3 === selectedColor;
        const sizeMatch = variant.option1 === selectedSize || variant.option2 === selectedSize || variant.option3 === selectedSize;
        return colorMatch && sizeMatch;
      });

      

      // Add matched variant to cart via Shopify AJAX API
      try {
        const response = await fetch('/assets/quick-add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: matchedVariant.id, quantity: 1 })
        });

        if (response.ok) {
          alert('Added to cart!');
          // Optionally, update cart UI or redirect to cart page
        } else {
          const errorData = await response.json();
          alert('Error adding to cart: ' + (errorData.description || response.statusText));
        }
      } catch (error) {
        alert('Network error adding to cart.');
        console.error(error);
      }
    });
  });
});








</script>


{% schema %}
{
  "name": "Tisso vison in the wild",
  "settings": [
    {
      "type": "text",
      "id": "wild_section_title",
      "label": "Section Title",
      "default": "Tisso vison in the wild"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    },

  ],
  "presets": [
    {
      "name": "GRID VIEW"
    }
  ]
}
{% endschema %}


